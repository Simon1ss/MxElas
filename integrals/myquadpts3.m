function [lambda,weight] = myquadpts3(order)
%% QUADPTS3 quadrature points in 3-D.
%
% [lambda,weight] = quadpts(order) return quadrature points with given
% order (up to 5) in the barycentric coordinates.
%
% The output lambda is a matrix of size nQ by 3, where nQ is the number of
% quadrature points. lambda(i,:) is three barycentric coordinate of the
% i-th quadrature point and lambda(:,j) is the j-th barycentric coordinate
% of all quadrature points. The x-y coordinate of the p-th quadrature point
% can be computed as
%
%     pxy = lambda(p,1)*node(elem(:,1),:) ...
%         + lambda(p,2)*node(elem(:,2),:) ...
%         + lambda(p,3)*node(elem(:,3),:) ...
%         + lambda(p,4)*node(elem(:,4),:);
%
% The weight of p-th quadrature point is given by weight(p). See
% verifyquadpts for the usage of qudrature rules to compute integrals over
% triangles.
%
% References:
%
% * Jinyun, Y. Symmetric Gaussian quadrature formulae for tetrahedronal
% regions. Comput. Methods Appl. Mech. Engrg.. 43(3):349--353, 1984.
%
% See also verifyquadpts, getmatrix, dunavant/dunavant_subrule
%
% Copyright (C) Long Chen. See COPYRIGHT.txt for details.

if order>8
    order = 8;
end
switch order
    %% Order 1, nQuad 1
    case 1
        lambda = [1/4, 1/4, 1/4, 1/4];
        weight = 1;
        %% Order 2, nQuad 4
    case 2
        alpha = 0.5854101966249685;
        beta =  0.138196601125015;
        lambda = [alpha beta beta beta; ....
            beta alpha beta beta; ...
            beta beta alpha beta; ...
            beta beta beta alpha];
        weight = [1/4, 1/4, 1/4, 1/4];
        %% Order 3, nQuad 5
    case 3
        lambda = [1/4 1/4 1/4 1/4; ...
            1/2 1/6 1/6 1/6; ...
            1/6 1/2 1/6 1/6; ...
            1/6 1/6 1/2 1/6; ...
            1/6 1/6 1/6 1/2];
        weight = [-4/5, 9/20, 9/20, 9/20, 9/20];
        %% Order 4, nQuad 16
    case 4
        alpha1 = 0.7716429020672371;
        beta1 =  0.7611903264425430e-1;
        w1 = 0.5037379410012282e-1;
        alpha = 0.4042339134672644;
        beta = 0.7183164526766925e-1;
        gamma = 0.11970052777978019;
        w2 = 0.6654206863329239e-1;
        lambda = [alpha1 beta1 beta1 beta1; ....
            beta1 alpha1 beta1 beta1; ...
            beta1 beta1 alpha1 beta1; ...
            beta1 beta1 beta1 alpha1; ...
            alpha alpha beta gamma; ...
            alpha alpha gamma beta; ...
            alpha beta alpha gamma; ...
            alpha beta gamma alpha; ...
            alpha gamma beta alpha; ...
            alpha gamma alpha beta; ...
            beta alpha alpha gamma; ...
            beta alpha gamma alpha; ...
            beta gamma alpha alpha; ...
            gamma alpha alpha beta; ...
            gamma alpha beta alpha; ...
            gamma beta alpha alpha];
        weight = [w1, w1, w1, w1, ...
            w2, w2, w2, w2, w2, w2, ...
            w2, w2, w2, w2, w2, w2];
        %% Order 5, nQuad 17
    case 5
        alpha1 = 0.7316369079576180;
        beta1 =  0.8945436401412733e-1;
        w1 = 0.6703858372604275e-1;
        alpha = 0.4214394310662522;
        beta = 0.2454003792903000e-1;
        gamma = 0.1325810999384657;
        w2 = 0.4528559236327399e-1;
        lambda = [1/4, 1/4, 1/4, 1/4; ...
            alpha1 beta1 beta1 beta1; ....
            beta1 alpha1 beta1 beta1; ...
            beta1 beta1 alpha1 beta1; ...
            beta1 beta1 beta1 alpha1; ...
            alpha alpha beta gamma; ...
            alpha alpha gamma beta; ...
            alpha beta alpha gamma; ...
            alpha beta gamma alpha; ...
            alpha gamma beta alpha; ...
            alpha gamma alpha beta; ...
            beta alpha alpha gamma; ...
            beta alpha gamma alpha; ...
            beta gamma alpha alpha; ...
            gamma alpha alpha beta; ...
            gamma alpha beta alpha; ...
            gamma beta alpha alpha];
        weight = [0.1884185567365411, ...
            w1, w1, w1, w1, ...
            w2, w2, w2, w2, w2, w2, ...
            w2, w2, w2, w2, w2, w2];
        
        %% Order 6, nQuad 29
    case 6 % needed for P4-P3 divergence matrix
        w1 = 0.1911983427899124e-1;
        w2 = 0.4361493840666568e-1;
        w3 = 0.2581167596199161e-1;
        weight = [0.9040129046014750e-1,...
            w1*ones(1,4),...
            w2*ones(1,12),...
            w3*ones(1,12)];
        alpha1 = 0.8277192480479295;
        beta1 = 0.5742691731735683e-1;
        gamma2 = 0.5135188412556341e-1;
        beta2 = 0.4860510285706072;
        alpha2 = 0.2312985436519147;
        gamma3 = 0.2967538129690260;
        beta3 = 0.6081079894015281;
        alpha3 = 0.4756909881472290e-1;
        lambda = [1/4,1/4,1/4,1/4;...
            alpha1 beta1 beta1 beta1; ....
            beta1 alpha1 beta1 beta1; ...
            beta1 beta1 alpha1 beta1; ...
            beta1 beta1 beta1 alpha1; ...
            alpha2 alpha2 beta2 gamma2; ...
            alpha2 alpha2 gamma2 beta2; ...
            alpha2 beta2 alpha2 gamma2; ...
            alpha2 beta2 gamma2 alpha2; ...
            alpha2 gamma2 beta2 alpha2; ...
            alpha2 gamma2 alpha2 beta2; ...
            beta2 alpha2 alpha2 gamma2; ...
            beta2 alpha2 gamma2 alpha2; ...
            beta2 gamma2 alpha2 alpha2; ...
            gamma2 alpha2 alpha2 beta2; ...
            gamma2 alpha2 beta2 alpha2; ...
            gamma2 beta2 alpha2 alpha2;...
            alpha3 alpha3 beta3 gamma3; ...
            alpha3 alpha3 gamma3 beta3; ...
            alpha3 beta3 alpha3 gamma3; ...
            alpha3 beta3 gamma3 alpha3; ...
            alpha3 gamma3 beta3 alpha3; ...
            alpha3 gamma3 alpha3 beta3; ...
            beta3 alpha3 alpha3 gamma3; ...
            beta3 alpha3 gamma3 alpha3; ...
            beta3 gamma3 alpha3 alpha3; ...
            gamma3 alpha3 alpha3 beta3; ...
            gamma3 alpha3 beta3 alpha3; ...
            gamma3 beta3 alpha3 alpha3];
        
    case 8
        alpha=zeros(4,1);
        w=zeros(7,1);
        alpha(1)=0.0396754230703899012650713295393895;
        alpha(2)=0.3144878006980963137841605626971483;
        alpha(3)=0.1019866930627033000000000000000000;
        alpha(4)=0.1842036969491915122759464173489092;
        beta=0.0634362877545398924051412387018983;
        zeta(1,1)=0.0216901620677280048026624826249302;
        zeta(1,2)=0.7199319220394659358894349533527348;
        zeta(2,1)=0.2044800806367957142413355748727453;
        zeta(2,2)=0.5805771901288092241753981713906204;
        w(1)=0.0063971477799023213214514203351730;
        w(2)=0.0401904480209661724881611584798178;
        w(3)=0.0243079755047703211748691087719226;
        w(4)=0.0548588924136974404669241239903914;
        w(5)=0.0357196122340991824649509689966176;
        w(6)=0.0071831906978525394094511052198038;
        w(7)=0.0163721819453191175409381397561191;
        lambda=zeros(46,4);
        weight=zeros(1,46);
        for i=1:4
            lambda(i*4-3,:)=[alpha(i),alpha(i),alpha(i),1-3*alpha(i)];
            lambda(i*4-2,:)=[alpha(i),alpha(i),1-3*alpha(i),alpha(i)];
            lambda(i*4-1,:)=[alpha(i),1-3*alpha(i),alpha(i),alpha(i)];
            lambda(i*4,:)=[1-3*alpha(i),alpha(i),alpha(i),alpha(i)];
            weight((1:4)+(i-1)*4)=w(i)*ones(1,4);
        end
        lambda(17,:)=[beta,beta,0.5-beta,0.5-beta];
        lambda(18,:)=[beta,0.5-beta,0.5-beta,beta];
        lambda(19,:)=[beta,0.5-beta,beta,0.5-beta];
        lambda(20,:)=[0.5-beta,beta,0.5-beta,beta];
        lambda(21,:)=[0.5-beta,0.5-beta,beta,beta];
        lambda(22,:)=[0.5-beta,beta,beta,0.5-beta];
        weight(17:22)=w(5)*ones(1,6);
        for i=1:2
            lambda((i-1)*12+23,:)=[zeta(i,1),zeta(i,1),zeta(i,2),1-2*zeta(i,1)-zeta(i,2)];
            lambda((i-1)*12+24,:)=[zeta(i,1),zeta(i,1),1-2*zeta(i,1)-zeta(i,2),zeta(i,2)];
            lambda((i-1)*12+25,:)=[zeta(i,1),zeta(i,2),zeta(i,1),1-2*zeta(i,1)-zeta(i,2)];
            lambda((i-1)*12+26,:)=[zeta(i,1),zeta(i,2),1-2*zeta(i,1)-zeta(i,2),zeta(i,1)];
            lambda((i-1)*12+27,:)=[zeta(i,2),zeta(i,1),zeta(i,1),1-2*zeta(i,1)-zeta(i,2)];
            lambda((i-1)*12+28,:)=[zeta(i,2),zeta(i,1),1-2*zeta(i,1)-zeta(i,2),zeta(i,1)];
            lambda((i-1)*12+29,:)=[1-2*zeta(i,1)-zeta(i,2),zeta(i,1),zeta(i,1),zeta(i,2)];
            lambda((i-1)*12+30,:)=[1-2*zeta(i,1)-zeta(i,2),zeta(i,1),zeta(i,2),zeta(i,1)];
            lambda((i-1)*12+31,:)=[zeta(i,1),1-2*zeta(i,1)-zeta(i,2),zeta(i,1),zeta(i,2)];
            lambda((i-1)*12+32,:)=[zeta(i,1),1-2*zeta(i,1)-zeta(i,2),zeta(i,2),zeta(i,1)];
            lambda((i-1)*12+33,:)=[zeta(i,2),1-2*zeta(i,1)-zeta(i,2),zeta(i,1),zeta(i,1)];
            lambda((i-1)*12+34,:)=[1-2*zeta(i,1)-zeta(i,2),zeta(i,2),zeta(i,1),zeta(i,1)];
            weight(i*12+(11:22))=w(i+5)*ones(1,12);
        end
        
end
%% Verification
% The order of the quadrature rule is verified by the function
% verifyquadpts. See <matlab:ifem('verifyquadpts') verifyquadpts>.
